openapi: 3.1.0

info:
  title: PPDRIVE
  version: 0.26.71
  summary: PPDRIVE - an integrated and secure file manager
  description: |
    PPDRIVE is a powerful, standalone file manager written in Rust,
    designed for seamless integration into other applications
    via a RESTful API.

    These API endpoints are grouped into:
      - [Client Routes](#/#client-routes)
      - [Protected Routes](#/#protected-routes)
      - [Unprotected Routes](#/#unprotected-routes)

    ### Client Routes
    Client Routes are accesible only to a verifiable PPDRIVE `Client`.
    A client is an external application capable of authorizing users
    and managing assets on PPDRIVE.

    To access these routes, you need to provide your client's `token`
    by adding the token to `x-ppd-client` header of your requests.
    You can generate a client token by running `ppdrive create_client
    {client_name}` or via the Admin UI.

    <b style="color:red;">IMPORTANT!</b> Client tokens give administrative
    access to anyone who possesses it. **DO NOT SHARE YOUR CLIENT TOKEN**.
    This means you should ONLY access client routes from your application
    server.

    If your client token is compromised (or for any other reason), you can
    regenerate a client token by running `ppdrive new_token {client_id}`.

    ### Unprotected Routes
    These routes require no authentication. You can access them with or
    without authorization. Even if you find some kind of authentications
    in our examples for unprotected routes, feel free to ignore them.

    ### Protect Routes
    Protected Routes are accesible only to a user with `Manage` or `Admin`
    role. The `user_role` is assigned when a client or admin [creates a new
    user](#/operations/clientRegisterUser).

    The `Protected` must be logged in before they can access this route. Call
    client's [login route](#/operations/clientLoginUser)
    to get a user's Bearer Token and pass the token to `Authorization` header
    of your request in the format `Bearer {token}`.

  contact:
    name: Ajayi Olamide
    url: https://github.com/prodbyola
    email: prodbyola@gmail.com
  license:
    name: MIT License
    url: https://github.com/prodbyola/ppdrive/blob/main/LICENSE

servers:
  - url: http://localhost:5000
    description: A local demo server

security:
  - clientKey: []
  - userAuth: []

paths:
  /{asset_type}/{asset_path}:
    get:
      operationId: getAsset
      deprecated: false
      summary: Get Asset
      description: |
        Serve an asset (file or folder) from the provided asset path.
      tags:
        - Unprotected Routes
      parameters:
        - name: asset_type
          in: path
          schema:
            type: string
            enum: [File, Folder]
          description: |
            This is the type of asset you're trying to retrieve. Set to `File`
            if you're trying to get a file and `Folder` if you're trying to get a folder
          required: true
        - name: asset_path
          in: path
          schema:
            type: string
          description: |
            This either the asset's original path or a custom_path set when
            the asset was created.
          required: true
      responses:
        200:
          description: |
            If the asset is a folder, we return browser-compatible html content
            rendering a list of folder contents.

            If the asset is a file, we return the file raw data with its
            respective mime type in `Content-Type` header for browser rendering.

  /client/user/register:
    post:
      operationId: clientRegisterUser
      deprecated: false
      summary: Register User
      description: |
        Register a new user. \
        If you're connecting PPDRIVE to an exisiting app (likely a reason to
        use clients), it's perfect to call this route before/after you've
        registered your user and bind the returned `id` to your app's user.
        See responses.200
      tags:
        - Client Routes
      security:
        - clientKey: []

      requestBody:
        description: Options for creating a new user
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserOptions"

      responses:
        200:
          description: |
            User's login details, including the token and expiration.
          content:
            appplication/json:
              schema:
                $ref: "#/components/schemas/LoginToken"

  /client/user/login:
    post:
      operationId: clientLoginUser
      deprecated: false
      summary: Login User
      description: |
        Authenticate a user and get their JWT.
        `password` field is not required for this route.
      tags:
        - Client Routes
      security:
        - clientKey: []

      requestBody:
        description: Options for creating a new user
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginCredentials"

      responses:
        200:
          description: User's login details, including the token and expiration.
          content:
            appplication/json:
              schema:
                type: string
                description: id of the new user.
                example: 3e7d53b-dd7f-464e-a3b9-7b1ec2d71ce5

  /client/user/{id}:
    delete:
      operationId: clientDeleteUser
      deprecated: false
      summary: Delete User
      description: Delete a user with the provided `id`.
      tags:
        - Client Routes
      security:
        - clientKey: []

      parameters:
        - required: true
          in: path
          name: id
          description: ID of the user to be deleted.
          schema:
            type: string
            decription: ID of the user to be deleted.

      responses:
        200:
          description: Operation success message.
          content:
            appplication/json:
              schema:
                type: string
                description: a message that indicates the operation was successful.
                example: operation successful

  /user:
    get:
      operationId: getAuthUser
      deprecated: false
      summary: Get Current User
      description: Retrieve details about the currently logged user.
      tags:
        - Protected Routes
      security:
        - userAuth: []

      responses:
        200:
          description: Current user details.
          content:
            appplication/json:
              schema:
                $ref: "#/components/schemas/UserDetails"

  /asset:
    post:
      operationId: authCreateAsset
      deprecated: false
      summary: Create or Upload Asset
      description: |
        Create a new asset. If the asset already exists, it will be updated.

        It's important for PPDRIVE to keep record of every asset and their
        ancestors in the filesystem. Therefore, this route traverses the asset
        `path` provided in `options`, if no record is found for any of its
        parent within the file hierarchy, we create the record and the respective
        asset. You can disable this behavior by settting `options.create_parents`
        to false.

      tags:
        - Protected Routes
      security:
        - userAuth: []

      requestBody:
        description: Options for creating the new asset
        required: true
        content:
          application/multipart:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary

                options:
                  required: true
                  type: object
                  $ref: "#/components/schemas/CreateAssetOptions"

      responses:
        200:
          description: |
            User's login details, including the token and expiration.
          content:
            appplication/json:
              schema:
                $ref: "#/components/schemas/LoginToken"

  /asset/{asset_type}/{asset_path}:
    delete:
      operationId: authDeleteAsset
      deprecated: false
      summary: Delete Asset
      description: |
        Delete an asset with the given `asset_type` and `asset_path`. The
        asset must exist and must be owned by the currently logged user.
        Otherwise we return an error.
      parameters:
        - name: asset_type
          in: path
          description: type of the asset to delete
          required: true
          schema:
            type: string
            enum: [File, Folder]

        - name: asset_path
          description: path of the asset to delete
          in: path
          required: true
          schema:
            type: string
      tags:
        - Protected Routes

components:
  securitySchemes:
    clientKey:
      type: apiKey
      in: header
      name: x-ppd-client

    userAuth:
      type: http
      scheme: bearer
      bearerFormat: Bearer

  schemas:
    CreateUserOptions:
      type: object
      properties:
        role:
          type: string
          enum: [Basic, Manager]
          description: The user's role

        partition:
          type: string
          description: |
            Create a dedicated partition for the user named by value provided.
            If this is not specified, user's assets will be stored in application's
            root partition. Partition name must be unique for every user. If the
            value is already take, this call will return an error.

        partition_size:
          type: integer
          description: |
            Max size (in bytes) to be assiged to the user's partition. This
            should be set only if `partition` is set. Otherwise, it would be
            ignored.

      example:
        role: Manager
        partition: prodbyola
        partition_size: 1024

      required:
        - role

    LoginCredentials:
      type: object
      properties:
        id:
          type: string
          description: This could be the user's id or email address.

        password:
          type: string
          description: |
            The user's password. Password is optional if you're not coming
            though a Client Route.

        exp:
          type: integer
          description: |
            Optional expiration period for user's token (in seconds). This
            defaults to 5 hours if not set. We're working on making the default
            value configurable.

      example:
        id: 3e7d53b-dd7f-464e-a3b9-7b1ec2d71ce5
        password: "MyUserPassword"
        exp: 5600

      required:
        - id

    LoginToken:
      type: object
      properties:
        token:
          type: string
          description: The user's JWT for subsequent authorization.

        exp:
          type: integer
          description: Token expiration (in seconds).

    UserDetails:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        partition:
          type: string
        partition_size:
          type: integer
        created_at:
          type: string

    CreateAssetOptions:
      type: object
      properties:
        path:
          type: string,
          description: The relative path where we save user's asset.

        asset_type:
          type: string
          description: The type of asset - whether it's a file or folder
          enum: [File, Folder]

        public:
          type: boolean
          description: |
            Asset's visibility. \
            Public assets can be accessed by everyone. Private assets
            can only be accessed by users with `Read` permission.

        custom_path:
          type: string
          description: |
            Set a custom path for your asset instead of the one auto-generated
            from `path`. This useful if you'd like to conceal your original asset
            path. `custom_path` is unique to each asset and is available if no other
            asset is already using it in the entire app.

            Your original asset path makes asset url look like this
            `https://mydrive.com/images/somewhere/my-image.png/`. Using
            custom path, you can conceal the original path:
            `https://mydrive.com/custom-path`

        create_parents:
          type: boolean
          description: |
            Whether to traverse path and create parent assets if they do
            do not exist.

        sharing:
          type: array
          items:
            $ref: "#/components/schemas/AssetSharing"
          description: |
            Users to share this asset with. This can only be set if `public`
            option is `false`. Otherwise, it'll be ignored. Also, you cannot
            share asset with asset owner. This will also be ignored.

      required:
        - path
        - asset_type

      example:
        path: some/path-to-a/filename.png
        asset_type: File

    AssetSharing:
      type: object
      properties:
        user_id:
          type: string
        permissions:
          type: array
          items:
            type: string
            enum: [Create, Read, Update, Delete]
      required:
        - user_id
        - permissions

tags:
  - name: Client Routes
    description: |
      Client Routes are accesible only to a verifiable PPDRIVE `Client`.
      A client is an external application capable of authorizing users
      and managing assets on PPDRIVE.

      To access these routes, you need to provide your client's `token`
      by adding the token to `x-ppd-client` header of your requests.
      You can generate a client token by running `ppdrive create_client
      {client_name}` or via the Admin UI.

      <b style="color:red;">IMPORTANT!</b> Client tokens give administrative
      access to anyone who possesses it. **DO NOT SHARE YOUR CLIENT TOKEN**.
      This means you should ONLY access client routes from your application
      server.

      If your client token is compromised (or for any other reason), you can
      regenerate a client token by running `ppdrive new_token {client_id}`.

  - name: Unprotected Routes
    description: |
      These routes require no authentication. You can access them with or
      without authorization. Even if you find some kind of authentications
      in our examples for unprotected routes, feel free to ignore them.

  - name: Protected Routes
    description: |
      Protected Routes are accesible only to a user with `Manage` or `Admin`
      role. The `user_role` is assigned when a client or admin [creates a new
      user](#tag/Client-Routes/paths/~1client~1user~1register/post).

      The `Protected` must be logged in before they can access this route. Call
      client's [login route](#tag/Client-Routes/paths/~1client~1user~1login/post)
      to get a user's Bearer Token and pass the token to `Authorization` header
      of your request in the format `Bearer {token}`.
